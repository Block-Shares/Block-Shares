{
  "transactions": [
    {
      "hash": "0xa09d41424da7c2bd3befadfa6653d95e7f65c6bf85b53d39f820790f7cd49e0d",
      "transactionType": "CREATE",
      "contractName": "TokenBizz",
      "contractAddress": "0x60b3e180e7450d78746504cf29dac995ebc76a79",
      "function": null,
      "arguments": [
        "(214, 0x234a5fb5Bd614a7AA2FfAB244D603abFA0Ac5C5C, 0x66756e2d617262697472756d2d7365706f6c69612d3100000000000000000000, 0x0153002d20B96532C639313c2d54c3dA09109309, 1730367776, 0, if (\\n    secrets.alpacaKey == \\\"\\\" ||\\n    secrets.alpacaSecret === \\\"\\\"\\n  ) {\\n    throw Error(\\n      \\\"need alpaca keys\\\"\\n    )\\n  }\\n  \\n\\n  // @NB : get total amount of token in our bank or brokerage\\n  \\n  const token_symbol = args[1];\\n  // const token_symbol = \\\"TSLA\\\";\\n  console.log(`this is the token symbol ${token_symbol}`);\\n  \\n  const alpacaRequest = Functions.makeHttpRequest({\\n    url: `https://paper-api.alpaca.markets/v2/positions/${token_symbol}`,\\n    headers: {\\n      accept: \\'application/json\\',\\n      \\'APCA-API-KEY-ID\\': secrets.alpacaKey,\\n      \\'APCA-API-SECRET-KEY\\': secrets.alpacaSecret\\n    }\\n  })\\n  \\n  const [response] = await Promise.all([\\n    alpacaRequest,\\n  ])\\n\\n  console.log(response);\\n  \\n  \\n  const portfolioBalance = response.data.qty\\n  console.log(`Alpaca Portfolio Balance: $${portfolioBalance}`)\\n  // The source code MUST return a Buffer or the request will return an error message\\n  // Use one of the following functions to convert to a Buffer representing the response bytes that are returned to the consumer smart contract:\\n  // - Functions.encodeUint256\\n  // - Functions.encodeInt256\\n  // - Functions.encodeString\\n  // Or return a custom Buffer for a custom byte encoding\\n  return Functions.encodeUint256(Math.round(portfolioBalance * 1000000000000000000)), // // What does this script do? \\n// // 1. Sells TSLA on alpaca for USD \\n// // 2. Buys USDC -> with USD\\n// // 3. Sends USDC -> contract for withdrawl\\n\\n// // Return 0 on unsuccessful sell \\n\\n\\nconst CRYPTO_TICKER = \\\"USDCUSD\\\"\\n// TODO\\nconst RWA_CONTRACT = \\\"0x8713Daefd36072B47eD7AD39801e1d713a1Bd5bd\\\"\\nconst SLEEP_TIME = 5000 // 5 seconds\\n\\n\\nasync function main() {\\n    const amountToken = args[0]\\n    const amountUsdc = args[1]\\n    const asset_symbol = args[2]\\n    _checkKeys();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           SELL TSLA FOR USD\\n    //////////////////////////////////////////////////////////////*/\\n    let side = \\\"sell\\\";\\n    let response = await placeOrder(asset_symbol, amountToken, side);\\n    console.log(response);\\n    let [client_order_id, orderStatus, responseStatus] = response;\\n    \\n    if (responseStatus !== 200) {\\n        return Functions.encodeUint256(0);\\n    }\\n    if (orderStatus !== \\\"accepted\\\") {\\n        return Functions.encodeUint256(0);\\n    }\\n\\n    let filled = await waitForOrderToFill(client_order_id);\\n    if (!filled) {\\n        // if this fails... That\\'s probably an issue\\n        await cancelOrder(client_order_id);\\n        return Functions.encodeUint256(0);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           BUY USDC WITH USD\\n    //////////////////////////////////////////////////////////////*/\\n    side = \\\"buy\\\"\\n    [client_order_id, orderStatus, responseStatus] = await placeOrder(CRYPTO_TICKER, amountToken, side);\\n    if (responseStatus !== 200) {\\n        return Functions.encodeUint256(0);\\n    }\\n    if (orderStatus !== \\\"accepted\\\") {\\n        return Functions.encodeUint256(0);\\n    }\\n    filled = await waitForOrderToFill(client_order_id);\\n    if (!filled) {\\n        // @audit, if this fails... That\\'s probably an issue\\n        await cancelOrder(client_order_id)\\n        return Functions.encodeUint256(0)\\n    }\\n  \\n    /*//////////////////////////////////////////////////////////////\\n                         SEND USDC TO CONTRACT\\n    //////////////////////////////////////////////////////////////*/\\n    const transferId = await sendUsdcToContract(amountUsdc)\\n    if (transferId === null) {\\n        return Functions.encodeUint256(0)\\n    }\\n\\n    const completed = await waitForCryptoTransferToComplete(transferId);\\n    if (!completed) {\\n        return Functions.encodeUint256(0);\\n    }\\n    return Functions.encodeUint256(amountUsdc);\\n}\\n\\n\\n// returns string: client_order_id, string: orderStatus, int: responseStatus\\nasync function placeOrder(symbol, qty, side) {\\n    // TODO, something is wrong with this request, need to fix\\n    const alpacaSellRequest = Functions.makeHttpRequest({\\n        method: \\'POST\\',\\n        url: \\\"https://paper-api.alpaca.markets/v2/orders\\\",\\n        headers: {\\n            \\'accept\\': \\'application/json\\',\\n            \\'content-type\\': \\'application/json\\',\\n            \\'APCA-API-KEY-ID\\': secrets.alpacaKey,\\n            \\'APCA-API-SECRET-KEY\\': secrets.alpacaSecret\\n        },\\n        data: {\\n            side: side,\\n            type: \\\"market\\\",\\n            time_in_force: \\\"gtc\\\",\\n            symbol: symbol,\\n            qty: qty\\n        }\\n    })\\n\\n    const [response] = await Promise.all([\\n        alpacaSellRequest,\\n    ])\\n    const responseStatus = response.status\\n    console.log(`\\\\nResponse status: ${responseStatus}\\\\n`)\\n    console.log(response)\\n    console.log(`\\\\n`)\\n\\n    const { client_order_id, status: orderStatus } = response.data\\n    return client_order_id, orderStatus, responseStatus\\n}\\n\\n// returns int: responseStatus\\nasync function cancelOrder(client_order_id) {\\n    const alpacaCancelRequest = Functions.makeHttpRequest({\\n        method: \\'DELETE\\',\\n        url: `https://paper-api.alpaca.markets/v2/orders/${client_order_id}`,\\n        headers: {\\n            \\'accept\\': \\'application/json\\',\\n            \\'APCA-API-KEY-ID\\': secrets.alpacaKey,\\n            \\'APCA-API-SECRET-KEY\\': secrets.alpacaSecret\\n        }\\n    })\\n\\n    const [response] = await Promise.all([\\n        alpacaCancelRequest,\\n    ])\\n\\n    const responseStatus = response.status\\n    return responseStatus\\n}\\n\\n// @returns bool\\nasync function waitForOrderToFill(client_order_id) {\\n    let numberOfSleeps = 0\\n    const capNumberOfSleeps = 10\\n    let filled = false\\n\\n    while (numberOfSleeps < capNumberOfSleeps) {\\n        const alpacaOrderStatusRequest = Functions.makeHttpRequest({\\n            method: \\'GET\\',\\n            url: `https://paper-api.alpaca.markets/v2/orders/${client_order_id}`,\\n            headers: {\\n                \\'accept\\': \\'application/json\\',\\n                \\'APCA-API-KEY-ID\\': secrets.alpacaKey,\\n                \\'APCA-API-SECRET-KEY\\': secrets.alpacaSecret\\n            }\\n        })\\n\\n        const [response] = await Promise.all([\\n            alpacaOrderStatusRequest,\\n        ])\\n\\n        const responseStatus = response.status\\n        const { status: orderStatus } = response.data\\n        if (responseStatus !== 200) {\\n            return false\\n        }\\n        if (orderStatus === \\\"filled\\\") {\\n            filled = true\\n            break\\n        }\\n        numberOfSleeps++\\n        await sleep(SLEEP_TIME)\\n    }\\n    return filled\\n}\\n\\n// returns string: transferId\\nasync function sendUsdcToContract(usdcAmount) {\\n    const transferRequest = Functions.makeHttpRequest({\\n        method: \\'POST\\',\\n        url: \\\"https://paper-api.alpaca.markets/v2/wallets/transfers\\\",\\n        headers: {\\n            \\'accept\\': \\'application/json\\',\\n            \\'content-type\\': \\'application/json\\',\\n            \\'APCA-API-KEY-ID\\': secrets.alpacaKey,\\n            \\'APCA-API-SECRET-KEY\\': secrets.alpacaSecret\\n        },\\n        data: {\\n            \\\"amount\\\": usdcAmount,\\n            \\\"address\\\": RWA_CONTRACT,\\n            \\\"asset\\\": CRYPTO_TICKER\\n        }\\n    })\\n\\n    const [response] = await Promise.all([\\n        transferRequest,\\n    ])\\n    if (response.status !== 200) {\\n        return null\\n    }\\n    return response.data.id\\n}\\n\\nasync function waitForCryptoTransferToComplete(transferId) {\\n    let numberOfSleeps = 0;\\n    const capNumberOfSleeps = 30 ;// 120 * 5 seconds = 10 minutes\\n    let completed = false;\\n\\n    while (numberOfSleeps < capNumberOfSleeps) {\\n        const alpacaTransferStatusRequest = Functions.makeHttpRequest({\\n            method: \\'GET\\',\\n            url: `https://paper-api.alpaca.markets/v2/wallets/transfers/${transferId}`,\\n            headers: {\\n                \\'accept\\': \\'application/json\\',\\n                \\'APCA-API-KEY-ID\\': secrets.alpacaKey,\\n                \\'APCA-API-SECRET-KEY\\': secrets.alpacaSecret\\n            }\\n        })\\n\\n        const [response] = await Promise.all([\\n            alpacaTransferStatusRequest,\\n        ])\\n\\n        const responseStatus = response.status\\n        // @audit, the transfer could complete, but the response could be 400\\n        const { status: transferStatus } = response.data\\n        if (responseStatus !== 200) {\\n            return false\\n        }\\n        if (transferStatus === \\\"completed\\\") {\\n            completed = true\\n            break\\n        }\\n        numberOfSleeps++\\n        await sleep(SLEEP_TIME)\\n    }\\n    return completed\\n\\n}\\n\\nfunction _checkKeys() {\\n    if (\\n        secrets.alpacaKey == \\\"\\\" ||\\n        secrets.alpacaSecret === \\\"\\\"\\n    ) {\\n        throw Error(\\n            \\\"need alpaca keys\\\"\\n        )\\n    }\\n}\\n\\nfunction sleep(ms) {\\n    return new Promise(resolve => setTimeout(resolve, ms))\\n}\\n\\n(async () => {\\n    try {\\n        const result = await main();\\n        console.log(result);\\n    } catch (error) {\\n        console.error(\\\"Error executing script:\\\", error);\\n        return result;\\n    }\\n\\n})();\\n\\n// const result = await main()\\n// return result, if (\\n    secrets.alpacaKey == \\\"\\\" ||\\n    secrets.alpacaSecret === \\\"\\\"\\n  ) {\\n    throw Error(\\n      \\\"need alpaca keys\\\"\\n    )\\n  }\\n// @NB : change to fetch current balance of the stock get the stock name from args\\n  const token_symbol = args[0];\\n  const alpacaRequest = Functions.makeHttpRequest({\\n    url: `https://paper-api.alpaca.markets/v2/positions/${token_symbol}`,\\n    headers: {\\n      accept: \\'application/json\\',\\n      \\'APCA-API-KEY-ID\\': secrets.alpacaKey,\\n      \\'APCA-API-SECRET-KEY\\': secrets.alpacaSecret\\n    }\\n  })\\n  \\n  const [response] = await Promise.all([\\n    alpacaRequest,\\n  ])\\n  \\n  const portfolioBalance = response.data.current_price\\n  console.log(`Alpaca Portfolio Balance: $${portfolioBalance}`)\\n  // The source code MUST return a Buffer or the request will return an error message\\n  // Use one of the following functions to convert to a Buffer representing the response bytes that are returned to the consumer smart contract:\\n  // - Functions.encodeUint256\\n  // - Functions.encodeInt256\\n  // - Functions.encodeString\\n  // Or return a custom Buffer for a custom byte encoding\\n  return Functions.encodeUint256(Math.round(portfolioBalance * 1000000000000000000)))"
      ],
      "transaction": {
        "from": "0x8713daefd36072b47ed7ad39801e1d713a1bd5bd",
        "gas": "0x9e276b",
        "value": "0x0",
        "input": "",
        "nonce": "0x7",
        "chainId": "0x66eee"
      },
      "additionalContracts": [],
      "isFixedGasLimit": false
    }
  ],
  "receipts": [
    {
      "status": "0x1",
      "cumulativeGasUsed": "0x787c82",
      "logs": [],
      "logsBloom": "0x
      "type": "0x2",
      "transactionHash": "0xa09d41424da7c2bd3befadfa6653d95e7f65c6bf85b53d39f820790f7cd49e0d",
      "transactionIndex": "0x1",
      "blockHash": "0x634c37065a3c40e48dc9fb7c8a28b15f51bb395e8aded165b6c807e6be57be89",
      "blockNumber": "0x5918d28",
      "gasUsed": "0x787c82",
      "effectiveGasPrice": "0x5f5e100",
      "from": "0x8713daefd36072b47ed7ad39801e1d713a1bd5bd",
      "to": null,
      "contractAddress": "0x60b3e180e7450d78746504cf29dac995ebc76a79",
      "gasUsedForL1": "0x1a55d",
      "l1BlockNumber": "0x6aa1b6"
    }
  ],
  "libraries": [],
  "pending": [],
  "returns": {},
  "timestamp": 1730439743,
  "chain": 421614,
  "commit": "a765a83"
}